/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package bruce_cmd;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class bruce_cmd_t implements lcm.lcm.LCMEncodable
{
    /**
     * LCM Type: double[3]
     */
    public double b_position[];

    /**
     * LCM Type: double[4]
     */
    public double rpy[];

    /**
     * LCM Type: double[3]
     */
    public double b_velocity[];

 
    public bruce_cmd_t()
    {
        b_position = new double[3];
        rpy = new double[4];
        b_velocity = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe7aaedbe35e49ba7L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(bruce_cmd.bruce_cmd_t.class))
            return 0L;
 
        classes.add(bruce_cmd.bruce_cmd_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.b_position[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.rpy[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.b_velocity[a]); 
        }
 
    }
 
    public bruce_cmd_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public bruce_cmd_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static bruce_cmd.bruce_cmd_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        bruce_cmd.bruce_cmd_t o = new bruce_cmd.bruce_cmd_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.b_position = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.b_position[a] = ins.readDouble();
        }
 
        this.rpy = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.rpy[a] = ins.readDouble();
        }
 
        this.b_velocity = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.b_velocity[a] = ins.readDouble();
        }
 
    }
 
    public bruce_cmd.bruce_cmd_t copy()
    {
        bruce_cmd.bruce_cmd_t outobj = new bruce_cmd.bruce_cmd_t();
        outobj.b_position = new double[(int) 3];
        System.arraycopy(this.b_position, 0, outobj.b_position, 0, 3); 
        outobj.rpy = new double[(int) 4];
        System.arraycopy(this.rpy, 0, outobj.rpy, 0, 4); 
        outobj.b_velocity = new double[(int) 3];
        System.arraycopy(this.b_velocity, 0, outobj.b_velocity, 0, 3); 
        return outobj;
    }
 
}

