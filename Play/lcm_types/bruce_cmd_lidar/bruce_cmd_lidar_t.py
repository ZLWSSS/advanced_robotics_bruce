"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class bruce_cmd_lidar_t(object):

    __slots__ = ["com_z", "com_velocity", "ang_vel_yaw"]

    __typenames__ = ["double", "double", "double"]

    __dimensions__ = [None, [2], None]

    def __init__(self):
        self.com_z = 0.0
        """ LCM Type: double """
        self.com_velocity = [ 0.0 for dim0 in range(2) ]
        """ LCM Type: double[2] """
        self.ang_vel_yaw = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(bruce_cmd_lidar_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">d", self.com_z))
        buf.write(struct.pack('>2d', *self.com_velocity[:2]))
        buf.write(struct.pack(">d", self.ang_vel_yaw))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != bruce_cmd_lidar_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return bruce_cmd_lidar_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = bruce_cmd_lidar_t()
        self.com_z = struct.unpack(">d", buf.read(8))[0]
        self.com_velocity = struct.unpack('>2d', buf.read(16))
        self.ang_vel_yaw = struct.unpack(">d", buf.read(8))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if bruce_cmd_lidar_t in parents: return 0
        tmphash = (0xa291f721bfccee99) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if bruce_cmd_lidar_t._packed_fingerprint is None:
            bruce_cmd_lidar_t._packed_fingerprint = struct.pack(">Q", bruce_cmd_lidar_t._get_hash_recursive([]))
        return bruce_cmd_lidar_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", bruce_cmd_lidar_t._get_packed_fingerprint())[0]

